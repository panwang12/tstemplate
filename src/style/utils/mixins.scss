@import "function";
/*
伪类
div {  
  @include pseudo(last-of-type) {
    color:red;
  }
}
div:last-of-type {
  color:red;
}

*/
/*
*/
@mixin pseudo($pseudo) {
  @at-root #{&}#{":#{$pseudo}"} {
    @content;
  }
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  content: "";
  position: $position;
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}
/*
超出隐藏
*/
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/*
BEM
@include b(button) {
  @include e(demo) {
    @include m(loading) {

    }
  }
}
编译之后
.sf-button__demo--loading {

}

*/
@mixin b($block) {
  $B: $namespace+"-"+$block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit +
      ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}
/*
状态切换时使用  需要与区分BEM中的modifier 功能不一样  modifier中M始终始终保持某个状态
div {
  @include when(active) {
    color:red
  }
}

div.is-active {
  color:red
}
*/
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin css-table-cell($lineHeight, $cellPaddingTop, $cellPaddingLeft, $firstCellPadding) {
  .cell {
    padding: $cellPaddingTop $cellPaddingLeft;
    line-height: $lineHeight;
    white-space: nowrap;
    height: 91px;
    line-height: 91px;
  }
  &:first-child {
    .cell {
      padding-left: $firstCellPadding;
    }
  }
}

@mixin left-border($height, $color) {
  font-size: $height;
  color: $color;
  border-left: solid 5px $color;
  padding-left: 8px;
  line-height: 1em;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
}
